# Custom formatter to display values in e7 format
e7_formatter <- function(x) {
sprintf("%.1f", x / 1e7)
}
# Boxplot with custom colors and e7 formatting
boxplot <- ggplot(loan_data, aes(x = factor(education), y = income_annum, fill = education)) +
geom_boxplot() +
scale_fill_manual(values = c("steelblue", "orange")) +
scale_y_continuous(labels = e7_formatter) +
ggtitle("Boxplot: Education vs Income") +
xlab("Education") +
ylab("Income Annum (e7)") +
theme_minimal()
# Violin plot with custom colors and e7 formatting
violinplot <- ggplot(loan_data, aes(x = factor(education), y = income_annum, fill = education)) +
geom_violin() +
scale_fill_manual(values = c("steelblue", "orange")) +
scale_y_continuous(labels = e7_formatter) +
ggtitle("Violin Plot: Education vs Income") +
xlab("Education") +
ylab("Income Annum (e7)") +
theme_minimal()
# Combine plots side by side
boxplot + violinplot
# Load patchwork for combining plots
library(patchwork)
# Custom formatter to display values in e7 format
e7_formatter <- function(x) {
sprintf("%.1f", x / 1e7)
}
# Boxplot with custom colors and e7 formatting
boxplot <- ggplot(loan_data, aes(x = factor(education), y = income_annum, fill = education)) +
geom_boxplot() +
scale_fill_manual(values = c("steelblue", "orange")) +
scale_y_continuous(labels = e7_formatter) +
ggtitle("Boxplot: Education vs Income") +
xlab("Education") +
ylab("Income Annum (e7)") +
theme_minimal()
# Violin plot with custom colors and e7 formatting
violinplot <- ggplot(loan_data, aes(x = factor(education), y = income_annum, fill = education)) +
geom_violin() +
scale_fill_manual(values = c("steelblue", "orange")) +
scale_y_continuous(labels = e7_formatter) +
ggtitle("Violin Plot: Education vs Income") +
xlab("Education") +
ylab("Income Annum (e7)") +
theme_minimal()
# Combine plots side by side
boxplot + violinplot
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(knitr)
# Load the Data Set
loan_data <- read.csv("loan_approval.csv")
# Split columns into two halves
half_cols <- ceiling(ncol(loan_data) / 2)
# First table (left side)
kable(head(loan_data[, 1:half_cols]),
caption = "First Few Rows of Loan Data (Part 1)")
# Second table (right side)
kable(head(loan_data[, (half_cols + 1):ncol(loan_data)]),
caption = "First Few Rows of Loan Data (Part 2)")
# Remove specified columns and show shape
loan_data <- loan_data[, !(names(loan_data) %in% c("loan_id"))]
# No. of rows & Columns in the loan_data (shape)
dim(loan_data)
# Display the structure of the loan_data data frame
str(loan_data)
# Load the psych package
library(psych)
# Display descriptive statistics of the loan_data data frame
describe(loan_data)
# Define a function to print unique values of a column
uniquevals <- function(col_name, df) {
cat(sprintf("Unique Values in %s are: %s\n", col_name,
paste(unique(df[[col_name]]), collapse = ", ")))
}
# Iterate over each column in the data frame and print unique values
for (col_name in colnames(loan_data)) {
uniquevals(col_name, loan_data)
cat(rep("-", 75), "\n")
}
# Identify categorical and numerical columns without dplyr
cat_var <- names(loan_data)[sapply(loan_data, function(x) is.factor(x) || is.character(x))]
num_var <- names(loan_data)[sapply(loan_data, is.numeric)]
# Print the column names with labels
cat("Categorical Variables:\n")
print(cat_var)
cat("\nNumerical Variables:\n")
print(num_var)
# Check for duplicates based on all columns
duplicates_all <- loan_data[duplicated(loan_data), ]
# Print the results
print(duplicates_all)
# Count missing values in each column
colSums(is.na(loan_data))
# Count zeros in each column
zero_counts <- colSums(loan_data == 0)
# Print the zero counts
print(zero_counts)
# Calculate means for the columns, ignoring zeros
mean_residential_assets <- mean(loan_data$residential_assets_value
[loan_data$residential_assets_value != 0],
na.rm = TRUE)
mean_commercial_assets <- mean(loan_data$commercial_assets_value
[loan_data$commercial_assets_value != 0],
na.rm = TRUE)
mean_bank_assets <- mean(loan_data$bank_asset_value
[loan_data$bank_asset_value != 0],
na.rm = TRUE)
# Replace zeros with means in the specified columns
loan_data$residential_assets_value[loan_data$residential_assets_value == 0] <- mean_residential_assets
loan_data$commercial_assets_value[loan_data$commercial_assets_value == 0] <- mean_commercial_assets
loan_data$bank_asset_value[loan_data$bank_asset_value == 0] <- mean_bank_assets
# Count zeros in each column
zero_counts <- colSums(loan_data == 0)
# Print the zero counts
print(zero_counts)
# Set up plot layout and margins
par(mfrow = c(3, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
# Columns to exclude from e7 formatting
exclude_cols <- c("no_of_dependents", "loan_term", "cibil_score")
# Select numeric columns
numeric_cols <- sapply(loan_data, is.numeric)
# Plot histograms with formatted axes
for (col in names(loan_data)[numeric_cols]) {
# Check if column needs e7 formatting
use_e7 <- !(col %in% exclude_cols)
# Create histogram without axes
hist(loan_data[[col]],
main = col,
xlab = if (use_e7) paste0(col, " (e7)") else col,
col = "steelblue",
border = "white",
axes = FALSE)
# Add custom x-axis with or without e7 formatting
if (use_e7) {
axis(1, at = pretty(loan_data[[col]]), labels = pretty(loan_data[[col]]) / 1e7)
} else {
axis(1)
}
# Add y-axis
axis(2)
}
# Load ggplot2
library(ggplot2)
ggplot(loan_data, aes(x=factor(loan_status), fill=factor(loan_status))) +
geom_bar(alpha=0.7) +
theme_minimal() +
ggtitle("Loan Approval Distribution") +
scale_fill_manual(values = c("steelblue", "chocolate"), labels = c("Rejected", "Approved")) +
labs(x = "Loan Status", fill = "Status")
# Plot count of no_of_dependents
ggplot(loan_data, aes(x = factor(no_of_dependents), fill = factor(no_of_dependents))) +
geom_bar() +
ggtitle("Number of Dependents") +
xlab("Number of Dependents") +
ylab("Count") +
scale_fill_manual(values = c("#4682B4", "#D8843F", "#32CD32", "#FFD700", "#FF6347", "#00DDE6")) +
theme_minimal() +
theme(legend.position = "none")
# Plot count of no_of_dependents with loan_status as hue
ggplot(loan_data, aes(x = factor(no_of_dependents), fill = loan_status)) +
geom_bar(position = "dodge") +
ggtitle("Number of Dependents by Loan Status") +
xlab("Number of Dependents") +
ylab("Count") +
scale_fill_manual(values = c("steelblue", "orange"), labels = c("Approved", "Rejected")) +
theme_minimal()
# Plot self_employed with education
ggplot(loan_data, aes(x = factor(self_employed), fill = education)) +
geom_bar(position = "dodge") +
ggtitle("Self Employed") +
xlab("Self Employed") +
ylab("Count") +
scale_fill_manual(values = c("steelblue", "orange")) +
theme_minimal()
# Load patchwork for combining plots
library(patchwork)
# Custom formatter to display values in e7 format
e7_formatter <- function(x) {
sprintf("%.1f", x / 1e7)
}
# Boxplot with custom colors and e7 formatting
boxplot <- ggplot(loan_data, aes(x = factor(education), y = income_annum, fill = education)) +
geom_boxplot() +
scale_fill_manual(values = c("steelblue", "orange")) +
scale_y_continuous(labels = e7_formatter) +
ggtitle("Boxplot: Education vs Income") +
xlab("Education") +
ylab("Income Annum (e7)") +
theme_minimal()
# Violin plot with custom colors and e7 formatting
violinplot <- ggplot(loan_data, aes(x = factor(education), y = income_annum, fill = education)) +
geom_violin() +
scale_fill_manual(values = c("steelblue", "orange")) +
scale_y_continuous(labels = e7_formatter) +
ggtitle("Violin Plot: Education vs Income") +
xlab("Education") +
ylab("Income Annum (e7)") +
theme_minimal()
# Combine plots side by side
boxplot + violinplot
plot(pressure)
# Create the plot with custom colors
ggplot(loan_data, aes(x = education, fill = loan_status)) +
geom_bar(position = "dodge") +
scale_fill_manual(values = c("steelblue", "orange")) +
ggtitle("Loan Status by Education") +
xlab("Education") +
ylab("Count") +
theme_minimal()
# Load ggplot2
library(ggplot2)
# Create the line plot with color
ggplot(loan_data, aes(x = loan_term, y = loan_amount, color = loan_status)) +
geom_line(size = 1) +
ggtitle("Loan Amount vs. Loan Term") +
xlab("Loan Term") +
ylab("Loan Amount") +
theme_minimal()
# Create a line plot with formatted axes
ggplot(loan_data, aes(x = loan_term, y = loan_amount)) +
geom_line() +
ggtitle("Loan Amount vs. Loan Term") +
scale_x_continuous(breaks = seq(2.5, max(loan_data$loan_term, na.rm = TRUE), by = 2.5)) +
scale_y_continuous(labels = scales::label_number(scale = 1e-7, suffix = "e7")) +
theme_minimal()
# Load the ggplot2 package
library(ggplot2)
# Create a scatter plot with formatted axes
ggplot(loan_data, aes(x = loan_term, y = loan_amount)) +
geom_point() +
ggtitle("Loan Amount vs. Loan Term") +
scale_x_continuous(breaks = seq(2.5, max(loan_data$loan_term, na.rm = TRUE), by = 2.5)) +
scale_y_continuous(labels = scales::label_number(scale = 1e-7, suffix = "e7")) +
theme_minimal()
# Load the ggplot2 package
library(ggplot2)
# Create an area chart with formatted axes
ggplot(loan_data, aes(x = loan_term, y = loan_amount)) +
geom_area(fill = "lightblue", alpha = 0.5) +
ggtitle("Loan Amount vs. Loan Term (Area Chart)") +
scale_x_continuous(breaks = seq(2.5, max(loan_data$loan_term, na.rm = TRUE), by = 2.5)) +
scale_y_continuous(labels = scales::label_number(scale = 1e-7, suffix = "e7")) +
theme_minimal()
# Load ggplot2
library(ggplot2)
# Create the plot
ggplot(loan_data, aes(x = loan_status, y = loan_amount, fill = loan_status)) +
geom_boxplot(outlier.color = "red", outlier.shape = 16, outlier.size = 2) +
ggtitle("Loan Amount vs Loan Status") +
xlab("Loan Status") +
ylab("Loan Amount") +
scale_fill_manual(values = c("Approved" = "steelblue", "Rejected" = "orange")) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 14))
library(ggplot2)
ggplot(loan_data, aes(x = loan_term, y = loan_amount)) +
geom_point(color = "steelblue", alpha = 0.6, size = 3) +
geom_smooth(method = "lm", color = "red", linetype = "dashed", se = FALSE) +
ggtitle("Loan Amount vs. Loan Term") +
xlab("Loan Term") +
ylab("Loan Amount") +
theme_minimal()
ggplot(loan_data, aes(x = loan_term, y = loan_amount, group = 1)) +
geom_line(color = "steelblue", size = 1) +
geom_point(color = "orange", size = 2) +
ggtitle("Loan Amount vs. Loan Term") +
xlab("Loan Term") +
ylab("Loan Amount") +
theme_minimal()
# Create the plot
ggplot(loan_data, aes(x = loan_status, y = loan_amount, fill = loan_status)) +
geom_boxplot(outlier.color = "red", outlier.shape = 16, outlier.size = 2) +
ggtitle("Loan Amount vs Loan Status") +
xlab("Loan Status") +
ylab("Loan Amount") +
scale_fill_manual(values = c("Approved" = "steelblue", "Rejected" = "orange")) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 14))
# Create the plot
ggplot(loan_data, aes(x = loan_status, y = loan_amount, fill = loan_status)) +
geom_boxplot(outlier.color = "red", outlier.shape = 16, outlier.size = 2) +
ggtitle("Loan Amount vs Loan Status") +
xlab("Loan Status") +
ylab("Loan Amount") +
scale_fill_manual(values = c("steelblue", "orange")) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 14))
ggplot(loan_data, aes(x = loan_term, y = loan_amount, color = loan_status)) +
geom_line(size = 1) +
geom_point(size = 2) +
ggtitle("Loan Amount vs. Loan Term by Loan Status") +
xlab("Loan Term") +
ylab("Loan Amount") +
theme_minimal()
library(ggplot2)
# Facet grid for Loan Amount vs. Loan Term by Loan Status
ggplot(loan_data, aes(x = loan_term, y = loan_amount)) +
geom_line(color = "steelblue", size = 1) +
geom_point(color = "orange", size = 2) +
facet_wrap(~ loan_status) +
ggtitle("Loan Amount vs. Loan Term by Loan Status") +
xlab("Loan Term") +
ylab("Loan Amount") +
theme_minimal()
library(ggplot2)
# Bubble Chart: Loan Amount vs Loan Term by Loan Status
ggplot(loan_data, aes(x = loan_term, y = loan_amount, size = loan_amount, color = loan_status)) +
geom_point(alpha = 0.7) +
scale_size_continuous(range = c(3, 10)) +
scale_color_manual(values = c("Approved" = "steelblue", "Rejected" = "orange")) +
ggtitle("Loan Amount vs Loan Term by Loan Status") +
xlab("Loan Term") +
ylab("Loan Amount") +
theme_minimal()
library(ggplot2)
# Heatmap: Loan Amount vs Loan Term
ggplot(loan_data, aes(x = loan_term, y = loan_amount, fill = loan_status)) +
geom_tile(color = "white", size = 0.2) +
scale_fill_manual(values = c("Approved" = "steelblue", "Rejected" = "orange")) +
ggtitle("Loan Amount vs Loan Term by Loan Status") +
xlab("Loan Term") +
ylab("Loan Amount") +
theme_minimal()
library(ggplot2)
# Heatmap: Loan Amount vs Loan Term
ggplot(loan_data, aes(x = loan_term, y = loan_amount, fill = loan_status)) +
geom_tile(color = "white", size = 0.2) +
scale_fill_manual(values = c("steelblue", "orange")) +
ggtitle("Loan Amount vs Loan Term by Loan Status") +
xlab("Loan Term") +
ylab("Loan Amount") +
theme_minimal()
library(ggplot2)
# Smooth Line Plot: Loan Amount vs Loan Term by Loan Status
ggplot(loan_data, aes(x = loan_term, y = loan_amount, color = loan_status)) +
geom_smooth(se = FALSE, size = 1.2) +
scale_fill_manual(values = c("steelblue", "orange")) +
ggtitle("Loan Amount vs Loan Term by Loan Status") +
xlab("Loan Term") +
ylab("Loan Amount") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Load required library
library(knitr)
library(kableExtra)
# Create the data frame
cibil_table <- data.frame(
CIBIL = c("300-549", "550-649", "650-749", "750-799", "800-900"),
Meaning = c("Poor", "Fair", "Good", "Very Good", "Excellent")
)
# Generate the table
kable(cibil_table,
col.names = c("CIBIL", "Meaning"),
caption = "CIBIL Score Ranges",
align = "c") %>%
kable_styling(full_width = FALSE, position = "center", bootstrap_options = c("striped", "hover"))
library(gt)
install.packages("gt")
library(gt)
# Create and display the table
cibil_scores <- data.frame(
CIBIL = c("300-549", "550-649", "650-749", "750-799", "800-900"),
Meaning = c("Poor", "Fair", "Good", "Very Good", "Excellent")
)
# Generate gt table
cibil_scores %>%
gt() %>%
tab_header(title = "CIBIL Score Ranges")
# Create data frame
cibil_scores <- data.frame(
CIBIL = c("300-549", "550-649", "650-749", "750-799", "800-900"),
Meaning = c("Poor", "Fair", "Good", "Very Good", "Excellent")
)
# Print the table
print(cibil_scores)
# Plot histogram with density curve (kde equivalent)
ggplot(df, aes(x = cibil_score)) +
geom_histogram(bins = 30, fill = "green", color = "black", alpha = 0.7) +
geom_density(color = "darkgreen", size = 1) +
ggtitle("Distribution of CIBIL Score") +
xlab("CIBIL Score") +
ylab("Count") +
theme_minimal()
# Plot histogram with density curve (kde equivalent)
ggplot(loan_data, aes(x = cibil_score)) +
geom_histogram(bins = 30, fill = "green", color = "black", alpha = 0.7) +
geom_density(color = "darkgreen", size = 1) +
ggtitle("Distribution of CIBIL Score") +
xlab("CIBIL Score") +
ylab("Count") +
theme_minimal()
# Load ggplot2 library
library(ggplot2)
# Plot histogram with red trend line
ggplot(loan_data, aes(x = cibil_score)) +
geom_histogram(bins = 30, fill = "green", color = "black", alpha = 0.7) +
geom_density(color = "red", size = 1) +  # Red line to show changes
scale_x_continuous(breaks = seq(300, 900, 100), limits = c(300, 900)) +
ggtitle("Distribution of CIBIL Score") +
xlab("CIBIL Score") +
ylab("Count") +
theme_minimal()
# Bar chart: CIBIL Score vs Loan Status
ggplot(loan_data, aes(x = factor(cibil_score), fill = loan_status)) +
geom_bar(position = "dodge", color = "black") +
scale_fill_manual(values = c("steelblue", "orange")) +
labs(title = "CIBIL Score vs Loan Status", x = "CIBIL Score", y = "Count") +
theme_minimal() +
theme(legend.title = element_blank())
# Bar chart: CIBIL Score vs Loan Status
ggplot(loan_data, aes(x = factor(cibil_score), fill = loan_status)) +
geom_bar(position = "dodge", color = "red") +
scale_fill_manual(values = c("steelblue", "orange")) +
labs(title = "CIBIL Score vs Loan Status", x = "CIBIL Score", y = "Count") +
theme_minimal() +
theme(legend.title = element_blank())
# Bar chart: CIBIL Score vs Loan Status
ggplot(loan_data, aes(x = factor(cibil_score), fill = loan_status)) +
geom_bar(position = "dodge", color = "black") +
scale_fill_manual(values = c("Approved" = "steelblue", "Rejected" = "orange")) +
labs(title = "CIBIL Score vs Loan Status", x = "CIBIL Score", y = "Count") +
theme_minimal() +
theme(legend.title = element_blank())
# Load ggplot2 library
library(ggplot2)
# Violin plot: CIBIL Score vs Loan Status
ggplot(df, aes(x = loan_status, y = cibil_score, fill = loan_status)) +
geom_violin(trim = FALSE, color = "black") +  # Violin plot with border
geom_boxplot(width = 0.1, color = "red", outlier.color = "red", outlier.shape = 16) +  # Outlier line
scale_fill_manual(values = c("Approved" = "steelblue", "Rejected" = "orange")) +
labs(title = "CIBIL Score vs Loan Status", x = "Loan Status", y = "CIBIL Score") +
theme_minimal() +
theme(legend.position = "none")  # Remove legend
# Load ggplot2 library
library(ggplot2)
# Violin plot: CIBIL Score vs Loan Status
ggplot(loan_data, aes(x = loan_status, y = cibil_score, fill = loan_status)) +
geom_violin(trim = FALSE, color = "black") +  # Violin plot with border
geom_boxplot(width = 0.1, color = "red", outlier.color = "red", outlier.shape = 16) +  # Outlier line
scale_fill_manual(values = c("Approved" = "steelblue", "Rejected" = "orange")) +
labs(title = "CIBIL Score vs Loan Status", x = "Loan Status", y = "CIBIL Score") +
theme_minimal() +
theme(legend.position = "none")  # Remove legend
# Load ggplot2 library
library(ggplot2)
# Violin plot: CIBIL Score vs Loan Status
ggplot(loan_data, aes(x = loan_status, y = cibil_score, fill = loan_status)) +
geom_violin(trim = FALSE, color = "black") +  # Violin plot with border
geom_boxplot(width = 0.1, color = "red", outlier.color = "red", outlier.shape = 16) +  # Outlier line
scale_fill_manual(values = c("steelblue", "orange")) +
labs(title = "CIBIL Score vs Loan Status", x = "Loan Status", y = "CIBIL Score") +
theme_minimal() +
theme(legend.position = "none")  # Remove legend
# Load libraries
library(gridExtra)
# Create individual histograms
p1 <- ggplot(df, aes(x = luxury_assets_value)) +
geom_histogram(fill = "red", color = "black", bins = 30) +
ggtitle("Luxury Assets") +
theme_minimal()
# Load libraries
library(gridExtra)
# Create individual histograms
p1 <- ggplot(loan_data, aes(x = luxury_assets_value)) +
geom_histogram(fill = "red", color = "black", bins = 30) +
ggtitle("Luxury Assets") +
theme_minimal()
p2 <- ggplot(loan_data, aes(x = bank_asset_value)) +
geom_histogram(fill = "blue", color = "black", bins = 30) +
ggtitle("Bank Assets") +
theme_minimal()
p3 <- ggplot(loan_data, aes(x = residential_assets_value)) +
geom_histogram(fill = "green", color = "black", bins = 30) +
ggtitle("Residential Assets") +
theme_minimal()
p4 <- ggplot(loan_data, aes(x = commercial_assets_value)) +
geom_histogram(fill = "black", color = "white", bins = 30) +
ggtitle("Commercial Assets") +
theme_minimal()
# Arrange the plots in a 2x2 grid
grid.arrange(p1, p2, p3, p4, ncol = 2)
# Load libraries
library(gridExtra)
library(scales)
# Function to format labels in e7
format_e7 <- function(x) sprintf("%.1f", x / 1e7)
# Create individual histograms with e7 formatting
p1 <- ggplot(loan_data, aes(x = luxury_assets_value)) +
geom_histogram(fill = "red", color = "black", bins = 30) +
ggtitle("Luxury Assets") +
scale_x_continuous(labels = format_e7) +
theme_minimal()
p2 <- ggplot(loan_data, aes(x = bank_asset_value)) +
geom_histogram(fill = "blue", color = "black", bins = 30) +
ggtitle("Bank Assets") +
scale_x_continuous(labels = format_e7) +
theme_minimal()
p3 <- ggplot(loan_data, aes(x = residential_assets_value)) +
geom_histogram(fill = "green", color = "black", bins = 30) +
ggtitle("Residential Assets") +
scale_x_continuous(labels = format_e7) +
theme_minimal()
p4 <- ggplot(loan_data, aes(x = commercial_assets_value)) +
geom_histogram(fill = "black", color = "white", bins = 30) +
ggtitle("Commercial Assets") +
scale_x_continuous(labels = format_e7) +
theme_minimal()
# Arrange the plots in a 2x2 grid
grid.arrange(p1, p2, p3, p4, ncol = 2)
