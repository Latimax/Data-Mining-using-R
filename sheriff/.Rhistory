knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
install.packages("RWeka")   # For J48 (C4.5 Implementation)
install.packages("C50")     # For C5.0
install.packages("caret")   # For cross-validation and performance evaluation
library(RWeka)
library(C50)
library(caret)
library(RWeka) # For J48 (C4.5 Implementation)
library(C50) # For C5.0
library(caret) # For cross-validation and performance evaluation
data <- read.csv("data.csv")
str(data)  # Check the structure
data <- read.csv("data.csv")
str(data)  # Check the structure
data <- read.csv("data.csv")
str(data)  # Check the structure
data <- read.csv("data.csv")
str(data)  # Check the structure
summary(data)  # Basic summary
#displays first 6 rows of the dataset
head(data)
# Load dplyr
library(dplyr)
# Map values: 1 → 0, 2 → 1
data$gender <- recode(data$gender, `1` = 0, `2` = 1)
head(data)
# Check for duplicates based on all columns
duplicate_row <- data[duplicated(data), ]
# Print the results
print(duplicate_row)
# Check total missing values in the dataset
sum(is.na(data))
# Check missing values per column
colSums(is.na(data))
# Check total missing values in the dataset
sum(is.na(data))
# Check missing values per column
colSums(is.na(data))
cat("There are", sum(duplicated(data)), "duplicated values in the data frame\n")
# Check total missing values in the dataset
sum(is.na(data))
# Check missing values per column
colSums(is.na(data))
# Convert age from days to years and round down to the nearest integer
data$age <- as.integer(data$age / 365)
# Convert age from days to years and round down to the nearest integer
data$age <- as.numeric(data$age)
# Check structure to confirm 'age' column exists and is numeric
str(data)
# Convert 'age' to numeric if necessary
data$age <- as.numeric(data$age)
# Convert age from days to years and round down to the nearest integer
data$age_days <- as.integer(data$age_days / 365)
head(data)
# Drop the 'age_days' column
data <- data[, !(names(data) == "age_days")]
# Rename 'age_year' to 'age'
names(data)[names(data) == "age_year"] <- "age"
# Ensure 'age' is an integer
data$age <- as.integer(data$age)
# Verify the changes
str(data)
# Drop the 'age_days' column
data <- data[, !(names(data) == "age_days")]
# Rename 'age_year' to 'age'
names(data)[names(data) == "age_year"] <- "age"
# Ensure 'age' is an integer
data$age <- as.integer(data$age)
# Verify the changes
head(data)
# Load ggplot2 library
library(ggplot2)
# Set plot layout to 2 plots per row
gridExtra::grid.arrange(
grobs = lapply(names(data), function(col) {
ggplot(data, aes(x = .data[[col]], fill = as.factor(cardio))) +
geom_histogram(color = "red", bins = 30, alpha = 0.7) +
labs(title = col, fill = "cardio") +
theme_minimal()
}),
ncol = 2
)
# Drop 'id' column
data <- data[, !(names(data) == "id")]
# Verify the changes
head(data)
# Load ggplot2 library
library(ggplot2)
# Set plot layout to 2 plots per row
gridExtra::grid.arrange(
grobs = lapply(names(data), function(col) {
ggplot(data, aes(x = .data[[col]], fill = as.factor(cardio))) +
geom_histogram(color = "red", bins = 30, alpha = 0.7) +
labs(title = col, fill = "cardio") +
theme_minimal()
}),
ncol = 2
)
library(ggplot2)
library(gridExtra)  # For side-by-side plots
# Create the two boxplots
plot1 <- ggplot(data, aes(y = ap_hi)) +
geom_boxplot() +
ggtitle("Boxplot of ap_hi (1)") +
theme_minimal()
plot2 <- ggplot(data, aes(y = ap_hi)) +
geom_boxplot() +
ggtitle("Boxplot of ap_hi (2)") +
theme_minimal()
# Arrange side by side
grid.arrange(plot1, plot2, ncol = 2)
# Drop rows where systolic pressure (ap_hi) > 230 or diastolic pressure (ap_lo) > 150
data <- data[!(data$ap_hi > 230 | data$ap_lo > 150), ]
# Check the shape (rows and columns)
dim(data)
# Load dplyr
library(dplyr)
# Map values: 1 → 0, 2 → 1
data$gender <- recode(data$gender, `1` = 0, `2` = 1)
head(data)
# Drop rows where systolic pressure (ap_hi) < 70 or diastolic pressure (ap_lo) < 55
data <- data[!(data$ap_hi < 70 | data$ap_lo < 55), ]
# Check the shape (rows and columns)
dim(data)
# Load necessary libraries
library(ggplot2)
# Create the boxplot
ggplot(data, aes(x = factor(cardio), y = height)) +
geom_boxplot() +
theme_minimal()
# Calculate IQR, upper limit, and lower limit
Q1 <- quantile(data$height, 0.25, na.rm = TRUE)
Q3 <- quantile(data$height, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
ul <- Q3 + 1.5 * IQR
ll <- Q1 - 1.5 * IQR
# Print the results
cat("IQR:", IQR, "\n")
cat("Upper limit:", ul, "\n")
cat("Lower limit:", ll, "\n")
# Load necessary libraries
library(ggplot2)
# Create the boxplot
ggplot(data, aes(x = factor(cardio), y = height, fill = factor(cardio))) +
geom_boxplot() +
scale_fill_manual(values = c("0" = "blue", "1" = "red")) +
theme_minimal() +
labs(x = "Cardio", y = "Height", fill = "Cardio") +
ggtitle("Height by Cardio")
# Calculate IQR, upper limit, and lower limit
Q1 <- quantile(data$height, 0.25, na.rm = TRUE)
Q3 <- quantile(data$height, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
ul <- Q3 + 1.5 * IQR
ll <- Q1 - 1.5 * IQR
# Print the results
cat("IQR:", IQR, "\n")
cat("Upper limit:", ul, "\n")
cat("Lower limit:", ll, "\n")
# Drop rows where height is less than 120 cm
data <- data[data$height >= 120, ]
# Reset row indices (optional, if needed)
rownames(data) <- NULL
# Check the updated data
dim(data)
# Load necessary libraries
library(ggplot2)
# Create the boxplot with blue and red colors
ggplot(data, aes(x = factor(cardio), y = weight, fill = factor(cardio))) +
geom_boxplot() +
scale_fill_manual(values = c("0" = "blue", "1" = "red")) +
theme_minimal() +
labs(x = "Cardio", y = "Weight", fill = "Cardio") +
ggtitle("Weight by Cardio")
# Calculate IQR, upper limit, and lower limit
Q1 <- quantile(data$weight, 0.25, na.rm = TRUE)
Q3 <- quantile(data$weight, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
ul <- Q3 + 1.5 * IQR
ll <- Q1 - 1.5 * IQR
# Print the results
cat("IQR:", IQR, "\n")
cat("Upper limit:", ul, "\n")
cat("Lower limit:", ll, "\n")
# Drop rows where weight is greater than 180
data <- data[data$weight <= 180, ]
# Reset row indices (optional, if needed)
rownames(data) <- NULL
# Check the updated data
dim(data)
# Drop rows where weight is less than 30
data <- data[data$weight >= 30, ]
# Reset row indices (optional, if needed)
rownames(data) <- NULL
# Check the updated data
head(data)
View(data)
View(data)
